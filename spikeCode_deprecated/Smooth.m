function [smoothed_output] = Smooth(input_matrix, stdx, fltptsx, stdy, fltptsy)% SMOOTH local weighted averaging of matrices using guassian weights (1- and 2-D)%%   [smoothed_output] = smooth(intput_matrix, stdx, fltptsx, [stdy], [fltptsy])%%        convolves input vector or matrix with a 1- or 2- dimensional%        gaussian and divides by the sum of the gaussian weights so that%        input and output values are directly comparable%        edge effects are compensated for%        filtptsx, filtptsy are number of points in the gaussian filter%        use even filter points for peaked gaussians (usually better)%        smooth with no output argument plots the specified filter (send it a 0 for input)%        if passed only stdx and fltptsx, impliments 1-D smoothing on rows%        of input_matrix[rows, cols] = size(input_matrix);if (nargin <2)     stdx = 1; endif (nargin <3)   fltptsx = 7*stdx+1;end;% 1-D smoothingif (nargin < 4) 	filt_ix = 1:fltptsx;	filt = gaussian(filt_ix, (fltptsx+1)/2, stdx);	unity_array = ones(rows, cols);	smoothed_output = conv2(input_matrix, filt, 'same') ...          ./conv2(unity_array, filt, 'same');	if (nargout==0)       plot(filt_ix, filt);       title('filter weights');	end;		return;end;% 2-D smoothingif (nargin<5)	fltptsy=7*stdy+1;end;filt_ix = 1:fltptsx;filt_iy = 1:fltptsy;meanx = (fltptsx+1)/2;meany = (fltptsy+1)/2;[X Y] = meshgrid(filt_ix, filt_iy);filt = exp((-1/2)*((X-meanx).^2)./(stdx^2) - (1/2)*((Y-meany).^2)./(stdy^2));unity_array = ones(rows, cols);smoothed_output = conv2(input_matrix, filt, 'same') ...          ./conv2(unity_array, filt, 'same');% plot the gaussian functionif (nargout==0)	midx = round(length(filt_ix)/2); 	midy = round(length(filt_iy)/2);	subplot(1,3,1);	imagesc(filt_ix, filt_iy, filt);	colorbar;	axis xy;	axis image;	xlabel('x dimension');	ylabel('y dimension');	subplot(1,3,2);	plot(filt_ix,filt(midy,:));	title('x dimension'); 	axis([min(filt_ix) max(filt_ix) 0 1]);	subplot(1,3,3);	plot(filt_iy,filt(:,midx));	title('y dimension');	axis([min(filt_iy) max(filt_iy) 0 1]);end;return;